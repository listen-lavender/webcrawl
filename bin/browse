#!/usr/bin/env python
# coding=utf-8
import os, sys
from docopt import docopt

proxy = """
var port, server, service,
  system = require("system"),
  webpage = require("webpage");
var timeouts = {};
function get_bytes(str, isGetBytes) {
   var back = [],
     byteSize = 0;
   for (var i = 0; i < str.length; i++) {
     var code = str.charCodeAt(i);
     if (code >= 0 && code <= 127) {
       byteSize += 1;
       back.push(code);
     } else if (code >= 128 && code <= 2047) {
       byteSize += 2;
       back.push((192 | (31 & (code >> 6))));
       back.push((128 | (63 & code)))
     } else if (code >= 2048 && code <= 65535) {
       byteSize += 3;
       back.push((224 | (15 & (code >> 12))));
       back.push((128 | (63 & (code >> 6))));
       back.push((128 | (63 & code)))
     }
   }
   for (i = 0; i < back.length; i++) {
     if (back[i] > 255) {
       back[i] &= 255
     }
   }
   if (isGetBytes) {
     return back
   }
   if (byteSize <= 255) {
     return [0, byteSize].concat(back);
   } else {
     return [byteSize >> 8, byteSize & 255].concat(back);
   }
}

if (system.args.length !== 2) {
  console.log("Usage: phantom web server <portnumber>");
  phantom.exit(1);
} else {
  port = system.args[1];
  server = require("webserver").create();
  console.debug = function(abc){};
  // console.debug = function(abc){console.log(abc)};

  service = server.listen(port, {
    "keepAlive": true
  }, function (request, response) {
    phantom.clearCookies();

    //console.debug(JSON.stringify(request, null, 4));
    // check method
    if (request.method == "GET") {
      response.statusCode = 403;
      response.write("method not allowed!");
      response.close();
      return;
    }
    
    var fetch = JSON.parse(request.post);
    console.debug(JSON.stringify(fetch, null, 2));

    // create and set page
    var urlhash = fetch.urlhash;
    timeouts[urlhash] = [];
    var page = webpage.create();
    var wait = (fetch.wait || 1) * 1000;
    page.viewportSize = {
      width: fetch.width || 1024,
      height: fetch.height || 768
    }
    if (fetch.headers) {
      fetch.headers["Accept-Encoding"] = undefined;
      fetch.headers["Connection"] = undefined;
      fetch.headers["Content-Length"] = undefined;
    }
    if (fetch.headers && fetch.headers["User-Agent"]) {
      page.settings.userAgent = fetch.headers["User-Agent"];
    }
    page.settings.encoding = "utf-8";
    page.settings.webSecurityEnabled = false;
    page.settings.localToRemoteUrlAccessEnabled = true;
    page.settings.loadImages = fetch.load_images || false;
    page.settings.resourceTimeout = (fetch.timeout || 120)*1000;
    if (fetch.headers) {
      page.customHeaders = fetch.headers;
    }
    if (fetch.cookies) {
      page.addCookie(fetch.cookies);
    }
    
    // add callbacks
    var first = null,
        finished = false,
        page_loaded = false,
        start_time = Date.now(),
        end_time = null,
        js_executed = {'start':false, 'end':false},
        js_result = {'start':null, 'request':[], 'receive':[], 'end':null};
    page.onInitialized = function() {
      if (!js_executed.start && fetch.javascript.start) {
        js_executed.start = true;
        console.debug("running document-start script.");
        js_result.start = page.evaluateJavaScript(fetch.javascript.start);
      }
    };
    page.onLoadFinished = function(status) {
      page_loaded = true;
      if (!js_executed.end && fetch.javascript.end) {
        js_executed.end = true;
        console.log("running document-end script.");
        js_result.end = page.evaluateJavaScript(fetch.javascript.end);
      }
      console.debug("waiting "+wait+"ms before finished.");
      end_time = Date.now() + wait;
      timeouts[urlhash].push(setTimeout(handle, wait+10, page, '3'));
    };
    page.onResourceRequested = function(request) {
      if (js_executed.request) {
        console.debug("running document-request script.");
        js_result.request.push(page.evaluateJavaScript(fetch.javascript.request));
      }
      console.debug("Starting request: #"+request.id+" ["+request.method+"]"+request.url);
      end_time = null;
    };
    page.onResourceReceived = function(response) {
      console.debug("Request finished: #"+response.id+" ["+response.status+"]"+response.url);
      if (first === null && response.status != 301 && response.status != 302) {
        first = response;
      }
      if (js_executed.receive) {
        console.debug("running document-request script.");
        js_result.receive.push(page.evaluateJavaScript(fetch.javascript.receive));
      }
      if (page_loaded) {
        console.debug("waiting "+wait+"ms before finished.");
        end_time = Date.now() + wait;
        timeouts[urlhash].push(setTimeout(handle, wait+10, page, '4'));
      }
    }
    page.onResourceError=page.onResourceTimeout=function(response) {
      console.info("Request error: #"+response.id+" ["+response.errorCode+"="+response.errorString+"]"+response.url);
      if (first === null) {
        first = response;
      }
      if (page_loaded) {
        console.debug("waiting "+wait+"ms before finished.");
        end_time = Date.now() + wait;
        timeouts[urlhash].push(setTimeout(handle, wait+10, page, '5'));
      }
    }
    timeouts[urlhash].push(setTimeout(function(page) {
      if (first) {
        end_time = Date.now()-1;
        handle(page, '0');
      }
    }, page.settings.resourceTimeout, page));

    // send request
    page.open(fetch.url, {
      operation: fetch.method,
      data: fetch.data,
      encoding: "utf8"
    });

    // make response
    function handle(page, index) {
      if (!!!end_time || finished) {
        return;
      }
      if (end_time > Date.now()) {
        timeouts[urlhash].push(setTimeout(handle, Date.now() - end_time, page, '2'));
        return;
      }

      for(timeoutid in timeouts[urlhash]){
        clearTimeout(timeoutid);
      }
      delete timeouts[urlhash];

      var result = {};
      try {
        result = format(page, index);
      } catch (e) {
        result = {
          origin: fetch.url,
          status_code: 599,
          error: e.toString(),
          content:  "",
          headers: {},
          url: page.url,
          cookies: {},
          time: (Date.now() - start_time) / 1000
        }
      }

      console.log("["+result.status_code+"] "+result.origin+" "+result.time)

      result['content'] = result['content'].replace(new RegExp('"', 'gm'), "'");
      var body = unescape(JSON.stringify(result, null, 2));
      var body_length = get_bytes(body, true).length;
      response.statusCode = 200;
      response.headers = {
        "Cache": "no-cache",
        "Content-Type": "application/json",
        "Connection": "Keep-Alive",
        "Keep-Alive": "timeout=5, max=100",
        "Content-Length": body_length
      };
      response.setEncoding("utf-8");
      response.write(body);
      response.close();
      finished = true;
      page.close();
    }

    function format(page, index) {
      var cookies = {};
      page.cookies.forEach(function(e) {
        cookies[e.name] = e.value;
      });

      var headers = {};
      if (first.headers) {
        first.headers.forEach(function(e) {
          headers[e.name] = e.value;
        });
      }

      return {
        origin: fetch.url,
        status_code: first.status || 599,
        error: first.errorString,
        content:  page.content,
        headers: headers,
        url: page.url,
        cookies: cookies,
        time: (Date.now() - start_time) / 1000,
        js_result: js_result
      }
    }
  });

  if (service) {
    console.log("Web server running on port " + port);
  } else {
    console.log("Error: Could not create web server listening on port " + port);
    phantom.exit();
  }
}
"""

if __name__ == '__main__':
    helpdoc = """Tools to use phantomjs(a headless WebKit scriptable with a JavaScript API) conviently.
    Usage:
      browse (-h|--help)
      browse (-p|--port) <port>

    Options:
      -h,  --help        Show help document.
      -p,  --port        Port for phantomjs server.
    """
    path = '/tmp/proxy.js'
    params = docopt(helpdoc)
    if params.get('<port>'):
        f = open(path, 'w')
        f.write(proxy)
        f.close()
        os.system('phantomjs %s %s' % (path, params.get('<port>')))
    else:
        pass