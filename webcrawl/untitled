import redis

class RedisQueue(object):
    conditions = {}

    def __init__(self, host='localhost', port=6379, db=0, tube='default', timeout=30, items=None, unfinished_tasks=None):
        import threading
        self.rc = redis.Redis(host='localhost', port=port, db=db)
        self.tube = tube
        if self.tube in RedisQueue.conditions:
            pass
        else:
            RedisQueue.conditions[self.tube] = {
                'unfinished_tasks': unfinished_tasks or 0, 'event': threading.Event()}
            self.clear()
            RedisQueue.conditions[self.tube]['event'].set()
        if items:
            for item in items:
                self.put(item)

    def put(self, item):
        priority, methodId, times, args, kwargs = item
        self.zadd(json.dumps({'priority': priority, 'methodId': methodId,
                                'times': times, 'args': args, 'kwargs': kwargs}), priority)
        # self.rc.put(json.dumps({'priority': priority, 'methodId': methodId,
        #                         'times': times, 'args': args, 'kwargs': kwargs}), priority=priority)
        RedisQueue.conditions[self.tube]['unfinished_tasks'] += 1
        RedisQueue.conditions[self.tube]['event'].clear()

    def get(self):
        item = self.rc.zrangebyscore(self.tube, float('-inf'), float('+inf'), start=0, num=1)
        self.rc.zrem(self.tube, item)
        item = unicode2utf8(json.loads(item))
        return (item['priority'], item['methodId'], item['times'], tuple(item['args']), item['kwargs'])

    def empty(self):
        if self.zcard(self.tube) == 0:
            return True
        else:
            return False

    def copy(self):
        pass

    def task_done(self, force=False):
        if RedisQueue.conditions[self.tube]['unfinished_tasks'] <= 0:
            raise ValueError('task_done() called too many times')
        RedisQueue.conditions[self.tube]['unfinished_tasks'] -= 1
        if RedisQueue.conditions[self.tube]['unfinished_tasks'] == 0 or force:
            # if self.empty() or force:
            RedisQueue.conditions[self.tube]['event'].set()

    def join(self):
        RedisQueue.conditions[self.tube]['event'].wait()

    def clear(self):
        while not self.empty():
            item = self.get()
            del item

    def __repr__(self):
        return "<" + str(self.__class__).replace(" ", "").replace("'", "").split('.')[-1]